{"version":3,"file":"xviz-trajectory-helper.js","names":["_Pose","Pose","turf","getRelativeCoordinates","vertices","basePose","transformMatrix","getTransformationMatrix","map","p","transform","getPoseTrajectory","poses","startFrame","endFrame","positions","iterationLimit","Math","min","length","i","push","pose","startPose","worldToStartPoseTransformMatrix","invert","currPose","offset","getGeospatialVector","relativeOffset","getGeospatialToPoseTransform","from","to","fromPose","x","y","z","pitch","roll","yaw","worldToFromPoseTransformMatrix","toPose","getTransformationMatrixFromPose","getObjectTrajectory","targetObject","objectFrames","poseFrames","startVehiclePose","limit","lastFrame","motions","getObjectMotions","step","currVehiclePose","longitude","latitude","altitude","fromPoint","destination","sqrt","PI","units","toPoint","distInMeters","distance","bearing","bearingInRadians","degreesToRadians","diffZ","sin","cos","getFrameObjects","frames","frameNumber","Map","get","Array","max","firstFrame","objects","object","find","obj","id"],"sources":["../../../../src/builders/helpers/xviz-trajectory-helper.js"],"sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {_Pose as Pose} from 'math.gl';\nimport * as turf from '@turf/turf';\n\n/**\n * Given vertices and a base pose, transform the vertices to `basePose` relative coordinates\n * @param vertices {Array} list of [x, y, z] or [x, y]\n * @param basePose {Object} {x, y, z, longitude, latitude, altitude, roll, pitch, yaw}\n * @returns {Array} list of vertices in relative coordinates\n */\nexport function getRelativeCoordinates(vertices, basePose) {\n  if (!(basePose instanceof Pose)) {\n    basePose = new Pose(basePose);\n  }\n\n  const transformMatrix = basePose.getTransformationMatrix();\n  return vertices.map(p => transformMatrix.transform(p));\n}\n\n/**\n * Generate trajectory for list of poses with given start frame and end frame\n * @param poses {Array}, frames of pose data,\n *   each frame contains a `pose` entry with {x, y, z, longitude, latitude, altitude, roll, pitch, yaw}\n * @param startFrame {Number}, start frame of trajectory\n * @param endFrame {Number}, end frame of trajectory\n * @returns {Array} trajectory, list of vertices\n */\nexport function getPoseTrajectory({poses, startFrame, endFrame}) {\n  const positions = [];\n  const iterationLimit = Math.min(endFrame, poses.length);\n\n  for (let i = startFrame; i < iterationLimit; i++) {\n    positions.push(poses[i].pose);\n  }\n\n  const startPose = poses[startFrame].pose;\n  const worldToStartPoseTransformMatrix = new Pose(startPose).getTransformationMatrix().invert();\n\n  return positions.map(currPose => {\n    // offset vector in world coordinate system\n    const offset = getGeospatialVector(startPose, currPose);\n\n    // transform offset to startPose coordinate system\n    const relativeOffset = worldToStartPoseTransformMatrix.transform(offset);\n\n    return relativeOffset;\n  });\n}\n\n/**\n * Return transform matrix that can be used to transform\n * data in `from` pose coordinate system into the `to` pose coordinate system\n *\n * @param from {Object} {longitude, latitude, pitch, roll, yaw}\n * @param to {Object} {longitude, latitude, pitch, roll, yaw}\n * @returns {Object} transformation matrix that converts 'from' relative coordinates into 'to' relative coordinates\n */\nexport function getGeospatialToPoseTransform(from, to) {\n  // Since 'to' is the target, get the vector from 'to -> from'\n  // and use that to set the position of 'from Pose'\n\n  // offset in world coordinate system\n  let offset = getGeospatialVector(from, to);\n\n  const fromPose = new Pose({\n    x: 0,\n    y: 0,\n    z: 0,\n    pitch: from.pitch,\n    roll: from.roll,\n    yaw: from.yaw\n  });\n\n  // transform offset to `fromPose` coordinate\n  // TODO figure out why this step is needed\n  const worldToFromPoseTransformMatrix = fromPose.getTransformationMatrix().invert();\n  offset = worldToFromPoseTransformMatrix.transform(offset);\n\n  const toPose = new Pose({\n    x: offset[0],\n    y: offset[1],\n    z: offset[2],\n    pitch: to.pitch,\n    roll: to.roll,\n    yaw: to.yaw\n  });\n\n  // there is a bug in math.gl https://github.com/uber-web/math.gl/issues/33\n  // pose.getTransformationMatrixFromPose and pose.getTransformationMatrixFromPose are flipped\n  return fromPose.getTransformationMatrixFromPose(toPose);\n}\n\n/**\n * Get object trajectory in pose relative coordinates\n * @param targetObject {Object} {id, x, y, z, ...}\n * @param objectFrames {Array}, all the frames of objects, (object: {id, x, y, z})\n * @param poseFrames {Array}, all the frames of base poses (pose: {longitude, latitude, altitude})\n * @param startFrame {Number}, start frame of trajectory\n * @param endFrame {Number}, end frame of trajectory\n * @returns {Array} trajectory, list of vertices\n */\nexport function getObjectTrajectory({\n  targetObject,\n  objectFrames,\n  poseFrames,\n  startFrame,\n  endFrame\n}) {\n  const vertices = [];\n  const startVehiclePose = poseFrames[startFrame].pose;\n  const limit = Math.min(endFrame, targetObject.lastFrame);\n  const motions = getObjectMotions(targetObject, objectFrames, startFrame, limit);\n\n  for (let i = 0; i < motions.length; i++) {\n    const step = motions[i];\n\n    const currVehiclePose = poseFrames[startFrame + i].pose;\n\n    // matrix to convert data from currVehiclePose relative to startVehiclePose relative.\n    const transformMatrix = getGeospatialToPoseTransform(currVehiclePose, startVehiclePose);\n\n    // objects in curr frame are meters offset based on currVehiclePose\n    // need to convert to the coordinate system of the startVehiclePose\n    const p = transformMatrix.transform([step.x, step.y, step.z]);\n    vertices.push(p);\n  }\n\n  return vertices;\n}\n\n/* eslint-disable complexity */\n/**\n * Get the meter vector from Geospatial coordinates in world coordinate system\n *\n * @param from {Object} {longitude, latitude, altitude, x, y, z}\n * @param to {Object} {longitude, latitude, altitude, x, y, z}\n * @returns {Array} Vector [x, y, z] in meters\n */\nexport function getGeospatialVector(from, to) {\n  from = {\n    longitude: from.longitude || 0,\n    latitude: from.latitude || 0,\n    altitude: from.altitude || 0,\n    x: from.x || 0,\n    y: from.y || 0,\n    z: from.z || 0,\n    yaw: from.yaw || 0\n  };\n\n  to = {\n    longitude: to.longitude || 0,\n    latitude: to.latitude || 0,\n    altitude: to.altitude || 0,\n    x: to.x || 0,\n    y: to.y || 0,\n    z: to.z || 0,\n    yaw: to.yaw || 0\n  };\n\n  const fromPoint = turf.destination(\n    [from.longitude, from.latitude, from.altitude],\n    Math.sqrt(from.x * from.x + from.y * from.y),\n    Math.PI / 2 - from.yaw,\n    {units: 'meters'}\n  );\n\n  const toPoint = turf.destination(\n    [to.longitude, to.latitude, to.altitude],\n    Math.sqrt(to.x * to.x + to.y * to.y),\n    Math.PI / 2 - to.yaw,\n    {units: 'meters'}\n  );\n\n  const distInMeters = turf.distance(fromPoint, toPoint, {units: 'meters'});\n\n  // Bearing is degrees from north, positive is clockwise\n  const bearing = turf.bearing(fromPoint, toPoint);\n  const bearingInRadians = turf.degreesToRadians(bearing);\n\n  const diffZ = to.altitude + to.z - from.altitude - from.z;\n\n  return [\n    distInMeters * Math.sin(bearingInRadians),\n    distInMeters * Math.cos(bearingInRadians),\n    diffZ\n  ];\n}\n/* eslint-enable complexity */\n\nfunction getFrameObjects(frames, frameNumber) {\n  if (frames instanceof Map) {\n    return frames.get(frameNumber);\n  }\n  if (frames instanceof Array) {\n    return frames[frameNumber];\n  }\n  return null;\n}\n\n/**\n * Generate motions for target object\n * @param targetObject {Object} {startFrame, endFrame, id, x, y, z,...}\n * @param objectFrames {Map | Array}, either a Map (key is frameNumber, value is list of objects) or an array of frames\n * @param startFrame {Number}\n * @param endFrame {Number}\n * @returns {Array} list of motions from given startFrame to endFrame\n */\nfunction getObjectMotions(targetObject, objectFrames, startFrame, endFrame) {\n  startFrame = Math.max(targetObject.firstFrame, startFrame);\n  endFrame = Math.min(targetObject.lastFrame, endFrame);\n\n  const motions = [];\n  for (let i = startFrame; i < endFrame; i++) {\n    const objects = getFrameObjects(objectFrames, i);\n    const object = objects.find(obj => obj.id === targetObject.id);\n    motions.push(object);\n  }\n\n  return motions;\n}\n"],"mappings":"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"}