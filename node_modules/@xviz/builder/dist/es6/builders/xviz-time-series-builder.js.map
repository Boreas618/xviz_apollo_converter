{"version":3,"file":"xviz-time-series-builder.js","names":["CATEGORY","XVIZBaseBuilder","XVIZTimeSeriesBuilder","constructor","props","category","TIME_SERIES","_data","Map","_id","_value","_timestamp","id","identifier","validatePropSetOnce","value","Array","validateError","timestamp","getData","_flush","size","timeSeriesData","dataEntries","from","entries","sort","l","r","ids","fields","tsdata","values","entry","streams","object_id","push","_addTimestampEntry","_dataPending","fieldName","String","tsEntry","get","idEntry","fieldEntry","includes","_streamId","set","_getFieldEntry","_getIdEntry","_validate","validateWarn","_reset"],"sources":["../../../src/builders/xviz-time-series-builder.js"],"sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {CATEGORY} from './constant';\nimport XVIZBaseBuilder from './xviz-base-builder';\n\n/**\n * XVIZTimeSeriesBuilder manages time_series data by `time` and `id` and stores\n * the the array of single stream value entries.\n *\n * This is the shape returned from getData()\n *\n * [\n *   {\n *     timestamp: x,\n *     streams: ['a', 'b'],\n *     values: {doubles: [1, 2]},\n *     object_id: '123'\n *   },\n *   {\n *     timestamp: y,\n *     streams: ['a', 'b'],\n *     values: {doubles: [1, 2]},\n *   }\n * ]\n */\nexport default class XVIZTimeSeriesBuilder extends XVIZBaseBuilder {\n  constructor(props) {\n    super({\n      ...props,\n      category: CATEGORY.TIME_SERIES\n    });\n\n    // Stores time_series data by timestamp then id\n    // They will then be group when constructing final object\n    this._data = new Map();\n\n    // inflight builder data\n    this._id = null;\n    this._value = null;\n    this._timestamp = null;\n  }\n\n  id(identifier) {\n    this.validatePropSetOnce('_id');\n    this._id = identifier;\n    return this;\n  }\n\n  value(value) {\n    this.validatePropSetOnce('_value');\n\n    if (value instanceof Array) {\n      this.validateError('Input `value` must be single value');\n    }\n\n    this._value = value;\n    return this;\n  }\n\n  timestamp(timestamp) {\n    this.validatePropSetOnce('_timestamp');\n\n    if (timestamp instanceof Array) {\n      this.validateError('Input `timestamp` must be a single value');\n    }\n\n    this._timestamp = timestamp;\n    return this;\n  }\n\n  getData() {\n    this._flush();\n    if (this._data.size === 0) {\n      return null;\n    }\n\n    const timeSeriesData = [];\n\n    // Return the data in timestamp sort order, not insertion order\n    const dataEntries = Array.from(this._data.entries());\n    dataEntries.sort((l, r) => l[0] - r[0]);\n\n    for (const [timestamp, ids] of dataEntries) {\n      for (const [id, fields] of ids) {\n        for (const tsdata of fields.values()) {\n          const entry = {\n            timestamp,\n            streams: tsdata.streams,\n            values: tsdata.values\n          };\n\n          /* eslint-disable camelcase, max-depth */\n          if (id !== null) {\n            entry.object_id = id;\n          }\n          /* eslint-enable camelcase, max-depth */\n\n          timeSeriesData.push(entry);\n        }\n      }\n    }\n\n    return timeSeriesData;\n  }\n\n  // Lookup by timestamp, then id to store [streamId, value]\n  _addTimestampEntry() {\n    // this._data structure\n    // timestamp: {\n    //   id: {\n    //     fieldName: {\n    //       streams: []\n    //       values: []\n    //     }\n    //   }\n    // }\n    if (!this._dataPending()) {\n      return;\n    }\n\n    // Lookup where to put the value\n    let fieldName = 'doubles';\n    if (typeof this._value === 'string' || this._value instanceof String) {\n      fieldName = 'strings';\n    } else if (typeof this._value === 'boolean') {\n      fieldName = 'bools';\n    }\n\n    // Building up the [(stream, value)] list\n    let tsEntry = this._data.get(this._timestamp);\n    if (tsEntry) {\n      // We have timestamp, now get id\n      const idEntry = tsEntry.get(this._id);\n      if (idEntry) {\n        const fieldEntry = idEntry.get(fieldName);\n        if (fieldEntry) {\n          // verify a duplicate ts & stream is present in current entry\n          if (fieldEntry.streams.includes(this._streamId)) {\n            this.validateError(\n              `TimeSeries entry is duplicate. Stream \"${this._streamId}\" at ${this._timestamp}.`\n            );\n          }\n\n          // append entry to existing array\n          fieldEntry.streams.push(this._streamId);\n          fieldEntry.values[fieldName].push(this._value);\n        } else {\n          idEntry.set(fieldName, this._getFieldEntry(fieldName));\n        }\n      } else {\n        // create new mapping of id -> array of entries\n        tsEntry.set(this._id, this._getIdEntry(fieldName));\n      }\n    } else {\n      // No timestamp entry\n      // create new id -> array of entries\n      // for same id different with fieldNames, we store as different ts entries\n      tsEntry = new Map();\n      tsEntry.set(this._id, this._getIdEntry(fieldName));\n      this._data.set(this._timestamp, tsEntry);\n    }\n  }\n\n  _getIdEntry(fieldName) {\n    const idEntry = new Map();\n    idEntry.set(fieldName, this._getFieldEntry(fieldName));\n    return idEntry;\n  }\n\n  _getFieldEntry(fieldName) {\n    return {\n      streams: [this._streamId],\n      values: {[fieldName]: [this._value]}\n    };\n  }\n\n  _dataPending() {\n    return this._value !== null || this._timestamp !== null || this._id !== null;\n  }\n\n  _validate() {\n    if (this._dataPending()) {\n      super._validate();\n\n      if (this._value === null) {\n        this.validateWarn(`Stream ${this._streamId} value is not provided.`);\n      }\n      if (this._timestamp === null) {\n        this.validateWarn(`Stream ${this._streamId} timestamp is not provided.`);\n      }\n    }\n  }\n\n  _flush() {\n    this._validate();\n\n    this._addTimestampEntry();\n    this._reset();\n  }\n\n  // reset the inflight values\n  _reset() {\n    this._id = null;\n    this._value = null;\n    this._timestamp = null;\n  }\n}\n"],"mappings":"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"}