{"version":3,"file":"xviz-time-series-builder.js","names":["XVIZTimeSeriesBuilder","props","category","CATEGORY","TIME_SERIES","_data","Map","_id","_value","_timestamp","identifier","validatePropSetOnce","value","Array","validateError","timestamp","_flush","size","timeSeriesData","dataEntries","from","entries","sort","l","r","ids","id","fields","values","tsdata","entry","streams","object_id","push","_dataPending","fieldName","String","tsEntry","get","idEntry","fieldEntry","includes","_streamId","set","_getFieldEntry","_getIdEntry","validateWarn","_validate","_addTimestampEntry","_reset","XVIZBaseBuilder"],"sources":["../../../src/builders/xviz-time-series-builder.js"],"sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {CATEGORY} from './constant';\nimport XVIZBaseBuilder from './xviz-base-builder';\n\n/**\n * XVIZTimeSeriesBuilder manages time_series data by `time` and `id` and stores\n * the the array of single stream value entries.\n *\n * This is the shape returned from getData()\n *\n * [\n *   {\n *     timestamp: x,\n *     streams: ['a', 'b'],\n *     values: {doubles: [1, 2]},\n *     object_id: '123'\n *   },\n *   {\n *     timestamp: y,\n *     streams: ['a', 'b'],\n *     values: {doubles: [1, 2]},\n *   }\n * ]\n */\nexport default class XVIZTimeSeriesBuilder extends XVIZBaseBuilder {\n  constructor(props) {\n    super({\n      ...props,\n      category: CATEGORY.TIME_SERIES\n    });\n\n    // Stores time_series data by timestamp then id\n    // They will then be group when constructing final object\n    this._data = new Map();\n\n    // inflight builder data\n    this._id = null;\n    this._value = null;\n    this._timestamp = null;\n  }\n\n  id(identifier) {\n    this.validatePropSetOnce('_id');\n    this._id = identifier;\n    return this;\n  }\n\n  value(value) {\n    this.validatePropSetOnce('_value');\n\n    if (value instanceof Array) {\n      this.validateError('Input `value` must be single value');\n    }\n\n    this._value = value;\n    return this;\n  }\n\n  timestamp(timestamp) {\n    this.validatePropSetOnce('_timestamp');\n\n    if (timestamp instanceof Array) {\n      this.validateError('Input `timestamp` must be a single value');\n    }\n\n    this._timestamp = timestamp;\n    return this;\n  }\n\n  getData() {\n    this._flush();\n    if (this._data.size === 0) {\n      return null;\n    }\n\n    const timeSeriesData = [];\n\n    // Return the data in timestamp sort order, not insertion order\n    const dataEntries = Array.from(this._data.entries());\n    dataEntries.sort((l, r) => l[0] - r[0]);\n\n    for (const [timestamp, ids] of dataEntries) {\n      for (const [id, fields] of ids) {\n        for (const tsdata of fields.values()) {\n          const entry = {\n            timestamp,\n            streams: tsdata.streams,\n            values: tsdata.values\n          };\n\n          /* eslint-disable camelcase, max-depth */\n          if (id !== null) {\n            entry.object_id = id;\n          }\n          /* eslint-enable camelcase, max-depth */\n\n          timeSeriesData.push(entry);\n        }\n      }\n    }\n\n    return timeSeriesData;\n  }\n\n  // Lookup by timestamp, then id to store [streamId, value]\n  _addTimestampEntry() {\n    // this._data structure\n    // timestamp: {\n    //   id: {\n    //     fieldName: {\n    //       streams: []\n    //       values: []\n    //     }\n    //   }\n    // }\n    if (!this._dataPending()) {\n      return;\n    }\n\n    // Lookup where to put the value\n    let fieldName = 'doubles';\n    if (typeof this._value === 'string' || this._value instanceof String) {\n      fieldName = 'strings';\n    } else if (typeof this._value === 'boolean') {\n      fieldName = 'bools';\n    }\n\n    // Building up the [(stream, value)] list\n    let tsEntry = this._data.get(this._timestamp);\n    if (tsEntry) {\n      // We have timestamp, now get id\n      const idEntry = tsEntry.get(this._id);\n      if (idEntry) {\n        const fieldEntry = idEntry.get(fieldName);\n        if (fieldEntry) {\n          // verify a duplicate ts & stream is present in current entry\n          if (fieldEntry.streams.includes(this._streamId)) {\n            this.validateError(\n              `TimeSeries entry is duplicate. Stream \"${this._streamId}\" at ${this._timestamp}.`\n            );\n          }\n\n          // append entry to existing array\n          fieldEntry.streams.push(this._streamId);\n          fieldEntry.values[fieldName].push(this._value);\n        } else {\n          idEntry.set(fieldName, this._getFieldEntry(fieldName));\n        }\n      } else {\n        // create new mapping of id -> array of entries\n        tsEntry.set(this._id, this._getIdEntry(fieldName));\n      }\n    } else {\n      // No timestamp entry\n      // create new id -> array of entries\n      // for same id different with fieldNames, we store as different ts entries\n      tsEntry = new Map();\n      tsEntry.set(this._id, this._getIdEntry(fieldName));\n      this._data.set(this._timestamp, tsEntry);\n    }\n  }\n\n  _getIdEntry(fieldName) {\n    const idEntry = new Map();\n    idEntry.set(fieldName, this._getFieldEntry(fieldName));\n    return idEntry;\n  }\n\n  _getFieldEntry(fieldName) {\n    return {\n      streams: [this._streamId],\n      values: {[fieldName]: [this._value]}\n    };\n  }\n\n  _dataPending() {\n    return this._value !== null || this._timestamp !== null || this._id !== null;\n  }\n\n  _validate() {\n    if (this._dataPending()) {\n      super._validate();\n\n      if (this._value === null) {\n        this.validateWarn(`Stream ${this._streamId} value is not provided.`);\n      }\n      if (this._timestamp === null) {\n        this.validateWarn(`Stream ${this._streamId} timestamp is not provided.`);\n      }\n    }\n  }\n\n  _flush() {\n    this._validate();\n\n    this._addTimestampEntry();\n    this._reset();\n  }\n\n  // reset the inflight values\n  _reset() {\n    this._id = null;\n    this._value = null;\n    this._timestamp = null;\n  }\n}\n"],"mappings":"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"}