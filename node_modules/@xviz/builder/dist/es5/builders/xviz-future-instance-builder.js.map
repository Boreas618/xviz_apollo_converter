{"version":3,"file":"xviz-future-instance-builder.js","names":["XVIZFutureInstanceBuilder","props","category","CATEGORY","FUTURE_INSTANCE","reset","_futures","timestamp","_ts","future","_streamId","timestamps","primitives","primitive","_formatPrimitive","update","_type","insertTimestamp","_flush","Object","keys","length","XVIZPrimitiveBuilder"],"sources":["../../../src/builders/xviz-future-instance-builder.js"],"sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* eslint-disable camelcase */\nimport XVIZPrimitiveBuilder from './xviz-primitive-builder';\nimport {insertTimestamp} from '../utils';\nimport {CATEGORY} from './constant';\n\nexport default class XVIZFutureInstanceBuilder extends XVIZPrimitiveBuilder {\n  constructor(props) {\n    super({\n      ...props,\n      category: CATEGORY.FUTURE_INSTANCE\n    });\n\n    this.reset();\n    // futures: {[streamId]: {...,timestamps: [], primitives: []}}\n    this._futures = {};\n  }\n\n  _timestamp(timestamp) {\n    this._ts = timestamp;\n    return this;\n  }\n\n  _flush() {\n    let future = this._futures[this._streamId];\n    if (!future) {\n      future = {\n        timestamps: [],\n        primitives: []\n      };\n      this._futures[this._streamId] = future;\n    }\n\n    const primitive = this._formatPrimitive();\n\n    const {timestamps, primitives} = future;\n\n    // Each type like \"image\" has an \"images\" array, this hack saves a\n    // big switch statement.\n    const update = {};\n    update[`${this._type}s`] = [primitive];\n\n    // insert ts and primitive to the position based on timestamp order\n    insertTimestamp(timestamps, primitives, this._ts, `${this._type}s`, primitive);\n\n    this.reset();\n  }\n\n  getData() {\n    if (this._type) {\n      this._flush();\n    }\n\n    if (Object.keys(this._futures).length === 0) {\n      return null;\n    }\n\n    return this._futures;\n  }\n\n  reset() {\n    super.reset();\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAeA;;AACA;;AACA;;;;;;;;;;IAEqBA,yB;;;;;EACnB,mCAAYC,KAAZ,EAAmB;IAAA;;IAAA;IACjB,0DACKA,KADL;MAEEC,QAAQ,EAAEC,kBAAA,CAASC;IAFrB;;IAKA,MAAKC,KAAL;;IAEA,MAAKC,QAAL,GAAgB,EAAhB;IARiB;EASlB;;;;WAED,oBAAWC,SAAX,EAAsB;MACpB,KAAKC,GAAL,GAAWD,SAAX;MACA,OAAO,IAAP;IACD;;;WAED,kBAAS;MACP,IAAIE,MAAM,GAAG,KAAKH,QAAL,CAAc,KAAKI,SAAnB,CAAb;;MACA,IAAI,CAACD,MAAL,EAAa;QACXA,MAAM,GAAG;UACPE,UAAU,EAAE,EADL;UAEPC,UAAU,EAAE;QAFL,CAAT;QAIA,KAAKN,QAAL,CAAc,KAAKI,SAAnB,IAAgCD,MAAhC;MACD;;MAED,IAAMI,SAAS,GAAG,KAAKC,gBAAL,EAAlB;;MAEA,cAAiCL,MAAjC;MAAA,IAAOE,UAAP,WAAOA,UAAP;MAAA,IAAmBC,UAAnB,WAAmBA,UAAnB;MAIA,IAAMG,MAAM,GAAG,EAAf;MACAA,MAAM,WAAI,KAAKC,KAAT,OAAN,GAA2B,CAACH,SAAD,CAA3B;MAGA,IAAAI,sBAAA,EAAgBN,UAAhB,EAA4BC,UAA5B,EAAwC,KAAKJ,GAA7C,YAAqD,KAAKQ,KAA1D,QAAoEH,SAApE;MAEA,KAAKR,KAAL;IACD;;;WAED,mBAAU;MACR,IAAI,KAAKW,KAAT,EAAgB;QACd,KAAKE,MAAL;MACD;;MAED,IAAIC,MAAM,CAACC,IAAP,CAAY,KAAKd,QAAjB,EAA2Be,MAA3B,KAAsC,CAA1C,EAA6C;QAC3C,OAAO,IAAP;MACD;;MAED,OAAO,KAAKf,QAAZ;IACD;;;WAED,iBAAQ;MACN;IACD;;;EAxDoDgB,gC"}