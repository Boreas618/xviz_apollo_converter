{"version":3,"file":"xviz-writer.js","names":["writeBinaryXVIZtoFile","xvizConvertJson","XVIZEnvelope","frameName","index","FileSink","fs","module","require","path","scope","name","data","xvizMetadataFilename","join","options","flag","writeFileSync","XVIZWriter","dataSink","envelope","binary","json","DracoWriter","DracoLoader","sink","frameTimings","frames","Map","wroteFrameIndex","xvizDirectory","xvizMetadata","_saveTimestamp","Metadata","flattenArrays","writeSync","JSON","stringify","frameIndex","xvizFrame","Error","StateUpdate","numberRounder","k","value","Number","toFixed","jsonXVIZFrame","startTime","endTime","frameTimes","Array","from","keys","sort","a","b","timing","forEach","limit","length","push","get","xviz_data","log_info","updates","undefined","start_time","end_time","every","update","timestamp","min","Math","map","max","set"],"sources":["../../../../src/writers/xviz-writer/xviz-writer.js"],"sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {writeBinaryXVIZtoFile} from './xviz-binary-writer';\nimport {xvizConvertJson} from './xviz-json-encoder.js';\nimport {XVIZEnvelope} from '@xviz/io';\n\n// 0-frame is an index file for timestamp metadata\n// 1-frame is the metadata file for the log\n// 2-frame is where the actual XVIZ updates begin\nconst frameName = index => `${index + 2}-frame`;\n\n/**\n * Class to abstract away file IO\n */\nclass FileSink {\n  constructor() {\n    this.fs = module.require('fs');\n    this.path = module.require('path');\n  }\n\n  writeSync(scope, name, data) {\n    const xvizMetadataFilename = this.path.join(scope, name);\n    const options = {\n      flag: 'w'\n    };\n    this.fs.writeFileSync(xvizMetadataFilename, data, options);\n  }\n}\n\nexport default class XVIZWriter {\n  constructor(options = {}) {\n    const {\n      dataSink = new FileSink(),\n      envelope = true,\n      binary = true,\n      json = false,\n      DracoWriter,\n      DracoLoader\n    } = options;\n    this.sink = dataSink;\n    this.frameTimings = {\n      frames: new Map()\n    };\n    this.wroteFrameIndex = null;\n    this.options = {envelope, binary, json, DracoWriter, DracoLoader};\n  }\n\n  // xvizMetadata is the object returned\n  // from a Builder.\n  writeMetadata(xvizDirectory, xvizMetadata) {\n    this._saveTimestamp(xvizMetadata);\n\n    if (this.options.envelope) {\n      xvizMetadata = XVIZEnvelope.Metadata(xvizMetadata);\n    }\n\n    if (this.options.binary) {\n      const options = {\n        flattenArrays: true\n      };\n\n      writeBinaryXVIZtoFile(this.sink, xvizDirectory, '1-frame', xvizMetadata, options);\n    }\n\n    if (this.options.json) {\n      this.sink.writeSync(xvizDirectory, '1-frame.json', JSON.stringify(xvizMetadata));\n    }\n  }\n\n  writeFrame(xvizDirectory, frameIndex, xvizFrame) {\n    if (this.wroteFrameIndex !== null) {\n      throw new Error(\n        `writeFrame() was called after writeFrameIndex().  The index was written with last frame of ${frameName(\n          this.wroteFrameIndex - 1\n        )}`\n      );\n    }\n\n    this._saveTimestamp(xvizFrame, frameIndex);\n\n    if (this.options.envelope) {\n      xvizFrame = XVIZEnvelope.StateUpdate(xvizFrame);\n    }\n\n    if (this.options.binary) {\n      const options = {\n        flattenArrays: true\n      };\n\n      if (this.options.DracoWriter) {\n        options.DracoWriter = this.options.DracoWriter;\n      }\n      if (this.options.DracoLoader) {\n        options.DracoLoader = this.options.DracoLoader;\n      }\n\n      writeBinaryXVIZtoFile(this.sink, xvizDirectory, frameName(frameIndex), xvizFrame, options);\n    }\n\n    if (this.options.json) {\n      // Limit precision to save space\n      const numberRounder = (k, value) => {\n        if (typeof value === 'number') {\n          return Number(value.toFixed(10));\n        }\n\n        return value;\n      };\n\n      const jsonXVIZFrame = xvizConvertJson(xvizFrame);\n      this.sink.writeSync(\n        xvizDirectory,\n        `${frameName(frameIndex)}.json`,\n        JSON.stringify(jsonXVIZFrame, numberRounder)\n      );\n    }\n  }\n\n  writeFrameIndex(xvizDirectory) {\n    const {startTime, endTime, frames} = this.frameTimings;\n    const frameTimings = {};\n\n    if (startTime) {\n      frameTimings.startTime = startTime;\n    }\n\n    if (endTime) {\n      frameTimings.endTime = endTime;\n    }\n\n    // Sort frames by index before writing out as an array\n    const frameTimes = Array.from(frames.keys()).sort((a, b) => a - b);\n\n    const timing = [];\n    frameTimes.forEach((value, index) => {\n      // Value is two greater than frame index\n      const limit = timing.length;\n      if (value > limit) {\n        // Adding 2 because 1-frame is metadata file, so frame data starts at 2\n        throw new Error(\n          `Error writing time index file. Frames are missing between ${limit + 2} and ${value + 2}`\n        );\n      }\n\n      timing.push(frames.get(value));\n    });\n    frameTimings.timing = timing;\n\n    this.sink.writeSync(xvizDirectory, '0-frame.json', JSON.stringify(frameTimings));\n    this.wroteFrameIndex = timing.length;\n  }\n\n  /* eslint-disable camelcase */\n  _saveTimestamp(xviz_data, index) {\n    const {log_info, updates} = xviz_data;\n\n    if (index === undefined) {\n      // Metadata case\n      if (log_info) {\n        const {start_time, end_time} = log_info || {};\n        if (start_time) {\n          this.frameTimings.startTime = start_time;\n        }\n\n        if (end_time) {\n          this.frameTimings.endTime = end_time;\n        }\n      }\n    } else if (updates) {\n      if (updates.length === 0 || !updates.every(update => typeof update.timestamp === 'number')) {\n        throw new Error('XVIZ updates did not contain a valid timestamp');\n      }\n\n      const min = Math.min(updates.map(update => update.timestamp));\n      const max = Math.max(updates.map(update => update.timestamp));\n\n      this.frameTimings.frames.set(index, [min, max, index, frameName(index)]);\n    } else {\n      // Missing updates & index is invalid call\n      throw new Error('Cannot find timestamp');\n    }\n  }\n  /* eslint-enable camelcase */\n}\n"],"mappings":"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"}