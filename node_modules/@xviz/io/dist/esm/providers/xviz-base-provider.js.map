{"version":3,"file":"xviz-base-provider.js","names":["XVIZData","MessageIterator","start","end","increment","current","valid","data","XVIZBaseProvider","reader","options","metadata","_valid","timeRange","startTime","endTime","_readMetadata","Number","isFinite","checkMessage","Error","iterator","next","message","_readMessage","startMessages","findMessage","endMessages","undefined","first","last","readMessage","readMetadata"],"sources":["../../../src/providers/xviz-base-provider.js"],"sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport {XVIZData} from '../common/xviz-data';\n\n// Generic iterator that stores context for context for an iterator\nclass MessageIterator {\n  constructor(start, end, increment = 1) {\n    this.start = start;\n    this.end = end;\n    this.increment = increment;\n    this.current = start;\n  }\n\n  valid() {\n    return this.current <= this.end;\n  }\n\n  value() {\n    return this.current;\n  }\n\n  next() {\n    const valid = this.valid();\n    if (!valid) {\n      return {valid};\n    }\n\n    const data = this.current;\n    this.current += this.increment;\n\n    return {\n      valid,\n      data\n    };\n  }\n}\n\nexport class XVIZBaseProvider {\n  constructor({reader, options}) {\n    this.reader = reader;\n    this.options = options;\n\n    this.metadata = null;\n    this._valid = false;\n  }\n\n  // Read index & metadata\n  async init() {\n    if (!this.reader) {\n      return;\n    }\n\n    const {startTime, endTime} = this.reader.timeRange();\n    this.metadata = this._readMetadata();\n\n    if (\n      this.metadata &&\n      Number.isFinite(startTime) &&\n      Number.isFinite(endTime) &&\n      this.reader.checkMessage(0) // verify the first message exists\n    ) {\n      this._valid = true;\n    }\n\n    if (this.metadata && (!Number.isFinite(startTime) || !Number.isFinite(endTime))) {\n      // TODO: should provide a command for the cli to regenerate the index files\n      throw new Error('The data source is missing the data index');\n    }\n  }\n\n  valid() {\n    return this._valid;\n  }\n\n  xvizMetadata() {\n    return this.metadata;\n  }\n\n  async xvizMessage(iterator) {\n    const {valid, data} = iterator.next();\n    if (!valid) {\n      return null;\n    }\n\n    const message = this._readMessage(data);\n    return message;\n  }\n\n  // The Provider provides an iterator since\n  // different sources may \"index\" their data independently\n  // however all iterators are based on a startTime/endTime\n  //\n  // If startTime and endTime cover the actual range, then\n  // they will be clamped to the actual range.\n  // Otherwise return undefined.\n  getMessageIterator({startTime, endTime} = {}, options = {}) {\n    const {startTime: start, endTime: end} = this.reader.timeRange();\n\n    if (!Number.isFinite(startTime)) {\n      startTime = start;\n    }\n\n    if (!Number.isFinite(endTime)) {\n      endTime = end;\n    }\n\n    if (startTime > endTime) {\n      return null;\n    }\n\n    const startMessages = this.reader.findMessage(startTime);\n    const endMessages = this.reader.findMessage(endTime);\n\n    if (startMessages !== undefined && endMessages !== undefined) {\n      return new MessageIterator(startMessages.first, endMessages.last);\n    }\n\n    return null;\n  }\n\n  // return XVIZData for message or undefined\n  _readMessage(message) {\n    const data = this.reader.readMessage(message);\n    if (data) {\n      return new XVIZData(data);\n    }\n\n    return undefined;\n  }\n\n  // return Metadata or undefined\n  _readMetadata() {\n    const data = this.reader.readMetadata();\n    if (data) {\n      return new XVIZData(data);\n    }\n\n    return undefined;\n  }\n}\n"],"mappings":"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"}