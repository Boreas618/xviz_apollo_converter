{"version":3,"file":"encode-glb.js","names":["MAGIC_glTF","MAGIC_JSON","MAGIC_BIN","LE","encodeGLBSync","glb","dataView","byteOffset","options","magic","version","json","binary","byteOffsetStart","setUint32","byteOffsetFileLength","byteOffsetJsonHeader","jsonString","JSON","stringify","copyPaddedStringToDataView","jsonByteLength","byteOffsetBinHeader","copyPaddedArrayBufferToDataView","binByteLength","fileByteLength"],"sources":["../../../src/gltf/encode-glb.js"],"sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable camelcase, max-statements */\nimport {\n  copyPaddedStringToDataView,\n  copyPaddedArrayBufferToDataView\n} from '@loaders.gl/loader-utils';\n\nconst MAGIC_glTF = 0x46546c67; // glTF in ASCII\nconst MAGIC_JSON = 0x4e4f534a; // JSON in ASCII\nconst MAGIC_BIN = 0x004e4942; // BIN\\0 in ASCII\n\nconst LE = true; // Binary GLTF is little endian.\n\n// Encode the full GLB buffer with header etc\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#\n// glb-file-format-specification\nexport default function encodeGLBSync(glb, dataView, byteOffset = 0, options = {}) {\n  const {magic = MAGIC_glTF, version = 2, json = {}, binary} = glb;\n\n  const byteOffsetStart = byteOffset;\n\n  // Write GLB Header\n  if (dataView) {\n    dataView.setUint32(byteOffset + 0, magic, LE); // Magic number (the ASCII string 'glTF').\n    dataView.setUint32(byteOffset + 4, version, LE); // Version 2 of binary glTF container format uint32\n    dataView.setUint32(byteOffset + 8, 0, LE); // Total byte length of generated file (uint32), will be set last\n  }\n  const byteOffsetFileLength = byteOffset + 8;\n  byteOffset += 12; // GLB_FILE_HEADER_SIZE\n\n  // Write the JSON chunk header\n  const byteOffsetJsonHeader = byteOffset;\n  if (dataView) {\n    dataView.setUint32(byteOffset + 0, 0, LE); // Byte length of json chunk (will be written later)\n    dataView.setUint32(byteOffset + 4, MAGIC_JSON, LE); // Chunk type\n  }\n  byteOffset += 8; // GLB_CHUNK_HEADER_SIZE\n\n  // Write the JSON chunk\n  const jsonString = JSON.stringify(json);\n  byteOffset = copyPaddedStringToDataView(dataView, byteOffset, jsonString, 4);\n\n  // Now we know the JSON chunk length so we can write it.\n  if (dataView) {\n    const jsonByteLength = byteOffset - byteOffsetJsonHeader - 8; // GLB_CHUNK_HEADER_SIZE\n    dataView.setUint32(byteOffsetJsonHeader + 0, jsonByteLength, LE); // Byte length of json chunk (uint32)\n  }\n\n  // Write the BIN chunk if present. The BIN chunk is optional.\n  if (binary) {\n    const byteOffsetBinHeader = byteOffset;\n\n    // Write the BIN chunk header\n    if (dataView) {\n      dataView.setUint32(byteOffset + 0, 0, LE); // Byte length BIN (uint32)\n      dataView.setUint32(byteOffset + 4, MAGIC_BIN, LE); // Chunk type\n    }\n    byteOffset += 8; // GLB_CHUNK_HEADER_SIZE\n\n    byteOffset = copyPaddedArrayBufferToDataView(dataView, byteOffset, binary, 4);\n\n    // Now we know the BIN chunk length so we can write it.\n    if (dataView) {\n      const binByteLength = byteOffset - byteOffsetBinHeader - 8; // GLB_CHUNK_HEADER_SIZE\n      dataView.setUint32(byteOffsetBinHeader + 0, binByteLength, LE); // Byte length BIN (uint32)\n    }\n  }\n\n  // Now we know the glb file length so we can write it.\n  if (dataView) {\n    const fileByteLength = byteOffset - byteOffsetStart;\n    dataView.setUint32(byteOffsetFileLength, fileByteLength, LE); // Total byte length of generated file (uint32)\n  }\n\n  return byteOffset;\n}\n"],"mappings":";;;;;;;AAcA;;AAKA,IAAMA,UAAU,GAAG,UAAnB;AACA,IAAMC,UAAU,GAAG,UAAnB;AACA,IAAMC,SAAS,GAAG,UAAlB;AAEA,IAAMC,EAAE,GAAG,IAAX;;AAKe,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,QAA5B,EAAoE;EAAA,IAA9BC,UAA8B,uEAAjB,CAAiB;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EACjF,iBAA6DH,GAA7D,CAAOI,KAAP;EAAA,IAAOA,KAAP,2BAAeT,UAAf;EAAA,mBAA6DK,GAA7D,CAA2BK,OAA3B;EAAA,IAA2BA,OAA3B,6BAAqC,CAArC;EAAA,gBAA6DL,GAA7D,CAAwCM,IAAxC;EAAA,IAAwCA,IAAxC,0BAA+C,EAA/C;EAAA,IAAmDC,MAAnD,GAA6DP,GAA7D,CAAmDO,MAAnD;EAEA,IAAMC,eAAe,GAAGN,UAAxB;;EAGA,IAAID,QAAJ,EAAc;IACZA,QAAQ,CAACQ,SAAT,CAAmBP,UAAU,GAAG,CAAhC,EAAmCE,KAAnC,EAA0CN,EAA1C;IACAG,QAAQ,CAACQ,SAAT,CAAmBP,UAAU,GAAG,CAAhC,EAAmCG,OAAnC,EAA4CP,EAA5C;IACAG,QAAQ,CAACQ,SAAT,CAAmBP,UAAU,GAAG,CAAhC,EAAmC,CAAnC,EAAsCJ,EAAtC;EACD;;EACD,IAAMY,oBAAoB,GAAGR,UAAU,GAAG,CAA1C;EACAA,UAAU,IAAI,EAAd;EAGA,IAAMS,oBAAoB,GAAGT,UAA7B;;EACA,IAAID,QAAJ,EAAc;IACZA,QAAQ,CAACQ,SAAT,CAAmBP,UAAU,GAAG,CAAhC,EAAmC,CAAnC,EAAsCJ,EAAtC;IACAG,QAAQ,CAACQ,SAAT,CAAmBP,UAAU,GAAG,CAAhC,EAAmCN,UAAnC,EAA+CE,EAA/C;EACD;;EACDI,UAAU,IAAI,CAAd;EAGA,IAAMU,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAeR,IAAf,CAAnB;EACAJ,UAAU,GAAG,IAAAa,uCAAA,EAA2Bd,QAA3B,EAAqCC,UAArC,EAAiDU,UAAjD,EAA6D,CAA7D,CAAb;;EAGA,IAAIX,QAAJ,EAAc;IACZ,IAAMe,cAAc,GAAGd,UAAU,GAAGS,oBAAb,GAAoC,CAA3D;IACAV,QAAQ,CAACQ,SAAT,CAAmBE,oBAAoB,GAAG,CAA1C,EAA6CK,cAA7C,EAA6DlB,EAA7D;EACD;;EAGD,IAAIS,MAAJ,EAAY;IACV,IAAMU,mBAAmB,GAAGf,UAA5B;;IAGA,IAAID,QAAJ,EAAc;MACZA,QAAQ,CAACQ,SAAT,CAAmBP,UAAU,GAAG,CAAhC,EAAmC,CAAnC,EAAsCJ,EAAtC;MACAG,QAAQ,CAACQ,SAAT,CAAmBP,UAAU,GAAG,CAAhC,EAAmCL,SAAnC,EAA8CC,EAA9C;IACD;;IACDI,UAAU,IAAI,CAAd;IAEAA,UAAU,GAAG,IAAAgB,4CAAA,EAAgCjB,QAAhC,EAA0CC,UAA1C,EAAsDK,MAAtD,EAA8D,CAA9D,CAAb;;IAGA,IAAIN,QAAJ,EAAc;MACZ,IAAMkB,aAAa,GAAGjB,UAAU,GAAGe,mBAAb,GAAmC,CAAzD;MACAhB,QAAQ,CAACQ,SAAT,CAAmBQ,mBAAmB,GAAG,CAAzC,EAA4CE,aAA5C,EAA2DrB,EAA3D;IACD;EACF;;EAGD,IAAIG,QAAJ,EAAc;IACZ,IAAMmB,cAAc,GAAGlB,UAAU,GAAGM,eAApC;IACAP,QAAQ,CAACQ,SAAT,CAAmBC,oBAAnB,EAAyCU,cAAzC,EAAyDtB,EAAzD;EACD;;EAED,OAAOI,UAAP;AACD"}