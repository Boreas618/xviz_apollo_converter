{"version":3,"file":"gltf-post-processor-old.js","names":["COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","BYTES","GL_SAMPLER","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","REPEAT","LINEAR","NEAREST_MIPMAP_LINEAR","SAMPLER_PARAMETER_GLTF_TO_GL","magFilter","minFilter","wrapS","wrapT","DEFAULT_SAMPLER","TEXTURE_WRAP_","getBytesFromComponentType","componentType","getSizeFromAccessorType","type","GLTFPostProcessorOld","gltf","glbParser","options","_resolveToTree","bufferViews","forEach","bufView","i","_resolveBufferView","images","image","_resolveImage","samplers","sampler","_resolveSampler","textures","texture","_resolveTexture","accessors","accessor","_resolveAccessor","materials","material","_resolveMaterial","meshes","mesh","_resolveMesh","nodes","node","_resolveNode","skins","skin","_resolveSkin","scenes","scene","_resolveScene","undefined","_process_extension_KHR_lights_punctual","index","_get","array","object","console","warn","id","map","getNode","children","child","getMesh","camera","getCamera","getSkin","inverseBindMatrices","getAccessor","primitives","primitive","attribute","attributes","indices","getMaterial","normalTexture","getTexture","occlusionTexture","emissiveTexture","pbrMetallicRoughness","mr","baseColorTexture","metallicRoughnessTexture","bufferView","getBufferView","bytesPerComponent","components","bytesPerElement","getSampler","source","getImage","parameters","key","glEnum","_enumSamplerParameter","createImages","getImageAsync","uri","Promise","resolve","img","Image","crossOrigin","onload","src","getFullUri","buffer","getBuffer","data","byteOffset","Uint8Array","byteLength","perspective","orthographic","extension","extensions","KHR_lights_punctual","lights","_removeExtension","nodeExtension","light","extensionName","extensionsRequired","_removeStringFromArray","extensionsUsed","string","found","indexOf","splice"],"sources":["../../../src/gltf/gltf-post-processor-old.js"],"sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport {getFullUri} from './gltf-utils/gltf-utils';\n\n// This is a post processor for loaded glTF files\n// The goal is to make the loaded data easier to use in WebGL applications\n//\n// Functions:\n// * Resolve indexed arrays structure of glTF into a linked tree.\n// * Translate stringified enum keys and values into WebGL constants.\n// * Load images (optional)\n\n// ENUM LOOKUP\n\nconst COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst BYTES = {\n  5120: 1, // BYTE\n  5121: 1, // UNSIGNED_BYTE\n  5122: 2, // SHORT\n  5123: 2, // UNSIGNED_SHORT\n  5125: 4, // UNSIGNED_INT\n  5126: 4 // FLOAT\n};\n\nconst GL_SAMPLER = {\n  // Sampler parameters\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n\n  // Sampler default values\n  REPEAT: 0x2901,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_LINEAR: 0x2702\n};\n\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\n\n// When undefined, a sampler with repeat wrapping and auto filtering should be used.\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\nconst DEFAULT_SAMPLER = {\n  [GL_SAMPLER.TEXTURE_MAG_FILTER]: GL_SAMPLER.LINEAR,\n  [GL_SAMPLER.TEXTURE_MIN_FILTER]: GL_SAMPLER.NEAREST_MIPMAP_LINEAR,\n  [GL_SAMPLER.TEXTURE_WRAP_S]: GL_SAMPLER.REPEAT,\n  [GL_SAMPLER.TEXTURE_WRAP_]: GL_SAMPLER.REPEAT\n};\n\nfunction getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\n\nfunction getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\n\nexport default class GLTFPostProcessorOld {\n  postProcess(gltf, glbParser, options = {}) {\n    this.gltf = gltf;\n    this.glbParser = glbParser;\n\n    this._resolveToTree(options);\n    return this.gltf;\n  }\n\n  // Convert indexed glTF structure into tree structure\n  // PREPARATION STEP: CROSS-LINK INDEX RESOLUTION, ENUM LOOKUP, CONVENIENCE CALCULATIONS\n  /* eslint-disable complexity */\n  _resolveToTree(options = {}) {\n    const {gltf} = this;\n\n    (gltf.bufferViews || []).forEach((bufView, i) => this._resolveBufferView(bufView, i));\n\n    (gltf.images || []).forEach((image, i) => this._resolveImage(image, i, options));\n    (gltf.samplers || []).forEach((sampler, i) => this._resolveSampler(sampler, i));\n    (gltf.textures || []).forEach((texture, i) => this._resolveTexture(texture, i));\n\n    (gltf.accessors || []).forEach((accessor, i) => this._resolveAccessor(accessor, i));\n    (gltf.materials || []).forEach((material, i) => this._resolveMaterial(material, i));\n    (gltf.meshes || []).forEach((mesh, i) => this._resolveMesh(mesh, i));\n\n    (gltf.nodes || []).forEach((node, i) => this._resolveNode(node, i));\n\n    (gltf.skins || []).forEach((skin, i) => this._resolveSkin(skin, i));\n\n    (gltf.scenes || []).forEach((scene, i) => this._resolveScene(scene, i));\n\n    if (gltf.scene !== undefined) {\n      gltf.scene = gltf.scenes[this.gltf.scene];\n    }\n\n    // EXTENSIONS\n    this._process_extension_KHR_lights_punctual();\n\n    return gltf;\n  }\n  /* eslint-enable complexity */\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  _get(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.gltf[array] && this.gltf[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // PARSING HELPERS\n\n  _resolveScene(scene, index) {\n    scene.id = `scene-${index}`;\n    scene.nodes = (scene.nodes || []).map(node => this.getNode(node));\n  }\n\n  _resolveNode(node, index) {\n    node.id = `node-${index}`;\n    node.children = (node.children || []).map(child => this.getNode(child));\n    if (node.mesh !== undefined) {\n      node.mesh = this.getMesh(node.mesh);\n    }\n    if (node.camera !== undefined) {\n      node.camera = this.getCamera(node.camera);\n    }\n    if (node.skin !== undefined) {\n      node.skin = this.getSkin(node.skin);\n    }\n  }\n\n  _resolveSkin(skin, index) {\n    skin.id = `skin-${index}`;\n    skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n  }\n\n  _resolveMesh(mesh, index) {\n    mesh.id = `mesh-${index}`;\n    for (const primitive of mesh.primitives) {\n      for (const attribute in primitive.attributes) {\n        primitive.attributes[attribute] = this.getAccessor(primitive.attributes[attribute]);\n      }\n      if (primitive.indices !== undefined) {\n        primitive.indices = this.getAccessor(primitive.indices);\n      }\n      if (primitive.material !== undefined) {\n        primitive.material = this.getMaterial(primitive.material);\n      }\n    }\n  }\n\n  _resolveMaterial(material, index) {\n    material.id = `material-${index}`;\n    if (material.normalTexture) {\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n    if (material.occlusionTexture) {\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n    if (material.emissiveTexture) {\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n\n    if (material.pbrMetallicRoughness) {\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n  }\n\n  _resolveAccessor(accessor, index) {\n    accessor.id = `accessor-${index}`;\n    if (accessor.bufferView !== undefined) {\n      // Draco encoded meshes don't have bufferView\n      accessor.bufferView = this.getBufferView(accessor.bufferView);\n    }\n\n    // Look up enums\n    accessor.bytesPerComponent = getBytesFromComponentType(accessor);\n    accessor.components = getSizeFromAccessorType(accessor);\n    accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n  }\n\n  _resolveTexture(texture, index) {\n    texture.id = `texture-${index}`;\n    texture.sampler = 'sampler' in texture ? this.getSampler(texture.sampler) : DEFAULT_SAMPLER;\n    texture.source = this.getImage(texture.source);\n  }\n\n  _resolveSampler(sampler, index) {\n    sampler.id = `sampler-${index}`;\n    // Map textual parameters to GL parameter values\n    sampler.parameters = {};\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n  }\n\n  _enumSamplerParameter(key) {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n\n  _resolveImage(image, index, options) {\n    image.id = `image-${index}`;\n    if (image.bufferView !== undefined) {\n      image.bufferView = this.getBufferView(image.bufferView);\n    }\n\n    // TODO - Handle non-binary-chunk images, data URIs, URLs etc\n    // TODO - Image creation could be done on getImage instead of during load\n    const {createImages = true} = options;\n    if (createImages) {\n      image.image = this.glbParser.getImage(image);\n    } else {\n      image.getImageAsync = () => {\n        if (this.glbParser) {\n          return this.glbParser.getImageAsync(image);\n        } else if (image.uri) {\n          // TODO: Maybe just return the URL?\n          // TODO: Maybe use loaders.gl/core loadImage?\n          return new Promise(resolve => {\n            /* global Image */\n            const img = new Image();\n            img.crossOrigin = 'anonymous';\n            img.onload = () => resolve(img);\n            img.src = getFullUri(image.uri, options.uri);\n          });\n        }\n\n        // cannot get image\n        return null;\n      };\n    }\n  }\n\n  _resolveBufferView(bufferView, index) {\n    bufferView.id = `bufferView-${index}`;\n    bufferView.buffer = this.getBuffer(bufferView.buffer);\n\n    if (this.glbParser) {\n      bufferView.data = this.glbParser.getBufferView(bufferView);\n    } else {\n      const byteOffset = bufferView.byteOffset || 0;\n      bufferView.data = new Uint8Array(bufferView.buffer.data, byteOffset, bufferView.byteLength);\n    }\n  }\n\n  _resolveCamera(camera) {\n    // TODO - create 4x4 matrices\n    if (camera.perspective) {\n      // camera.matrix = createPerspectiveMatrix(camera.perspective);\n    }\n    if (camera.orthographic) {\n      // camera.matrix = createOrthographicMatrix(camera.orthographic);\n    }\n  }\n\n  // EXTENSIONS\n\n  // eslint-disable-next-line camelcase\n  _process_extension_KHR_lights_punctual() {\n    const {gltf} = this;\n\n    // Move the light array out of the extension and remove the extension\n    const extension = gltf.extensions && gltf.extensions.KHR_lights_punctual;\n    if (extension) {\n      gltf.lights = extension.lights;\n    }\n\n    this._removeExtension('KHR_lights_punctual');\n\n    // Any nodes that have the extension, add lights field pointing to light object\n    // and remove the extension\n    for (const node of gltf.nodes || []) {\n      const nodeExtension = node.extensions && node.extensions.KHR_lights_punctual;\n      if (nodeExtension) {\n        node.light = this._get('lights', nodeExtension.light);\n        delete node.extensions.KHR_lights_punctual;\n      }\n    }\n\n    delete gltf.lights;\n  }\n\n  // Removes an extension from the top-level list\n  _removeExtension(extensionName) {\n    if (this.gltf.extensionsRequired) {\n      this._removeStringFromArray(this.gltf.extensionsRequired, extensionName);\n    }\n    if (this.gltf.extensionsUsed) {\n      this._removeStringFromArray(this.gltf.extensionsUsed, extensionName);\n    }\n    if (this.gltf.extensions) {\n      delete this.gltf.extensions[extensionName];\n    }\n  }\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n    while (found) {\n      const index = array.indexOf(string);\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n}\n"],"mappings":"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"}